package com.tedaich.mobile.asr.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.tedaich.mobile.asr.model.AudioText;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "audio_text".
*/
public class AudioTextDao extends AbstractDao<AudioText, Long> {

    public static final String TABLENAME = "audio_text";

    /**
     * Properties of entity AudioText.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AudioId = new Property(1, Long.class, "audioId", false, "AUDIO_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property CreateTime = new Property(4, java.util.Date.class, "createTime", false, "CREATE_TIME");
    }

    private Query<AudioText> audio_AudioTextListQuery;

    public AudioTextDao(DaoConfig config) {
        super(config);
    }
    
    public AudioTextDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"audio_text\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AUDIO_ID\" INTEGER," + // 1: audioId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TEXT\" TEXT NOT NULL ," + // 3: text
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 4: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"audio_text\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AudioText entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long audioId = entity.getAudioId();
        if (audioId != null) {
            stmt.bindLong(2, audioId);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getText());
        stmt.bindLong(5, entity.getCreateTime().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AudioText entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long audioId = entity.getAudioId();
        if (audioId != null) {
            stmt.bindLong(2, audioId);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getText());
        stmt.bindLong(5, entity.getCreateTime().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AudioText readEntity(Cursor cursor, int offset) {
        AudioText entity = new AudioText( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // audioId
            cursor.getInt(offset + 2), // type
            cursor.getString(offset + 3), // text
            new java.util.Date(cursor.getLong(offset + 4)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AudioText entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAudioId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setText(cursor.getString(offset + 3));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AudioText entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AudioText entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AudioText entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "audioTextList" to-many relationship of Audio. */
    public List<AudioText> _queryAudio_AudioTextList(Long audioId) {
        synchronized (this) {
            if (audio_AudioTextListQuery == null) {
                QueryBuilder<AudioText> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AudioId.eq(null));
                audio_AudioTextListQuery = queryBuilder.build();
            }
        }
        Query<AudioText> query = audio_AudioTextListQuery.forCurrentThread();
        query.setParameter(0, audioId);
        return query.list();
    }

}
